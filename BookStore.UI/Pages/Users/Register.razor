@page "/Register"

@using BookStore.UI.Models 
@using BookStore.UI.Contracts 

@inject IAuthenticationRepository _authRepo;
@inject NavigationManager _navMan;
    <div class="card">
        <h3 class="card-title">
            Register Now
        </h3>
        @if(!response)
        {
            <div class="alert alert-danger">
                <p>Something went wrong with registration attempt</p>
            </div>
        }
        <div class="card-body">
            <EditForm Model="Model" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="email">Email address</label>
                    <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
                    <ValidationMessage For="@(() => Model.EmailAddress)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="Password" type="password" class="form-control" @bind-Value="Model.Password" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <div class="form-group">
                    <label for="Confirmpassword">Confirm Password</label>
                    <InputText Id="Password" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </div>
                <button type="submit" class="btn btn-primary btn-block">Submit</button>
            </EditForm>
        </div>
    </div>

@code {
    private RegistrationModel Model = new RegistrationModel();
    bool response = true;

    private async Task HandleRegistration()
    {
        var response = await _authRepo.Register(Model);

        if (response)
        {
            _navMan.NavigateTo("/login");
        }
        

    }
}
